public class Solution {
    //---------------------------------------------------------
    // **RECURSIVE**
    //---------------------------------------------------------
    // TC: Exponential
    // SC: O(n) for the recursion stack.
    //---------------------------------------------------------
//     int f(int ind, int T, int[] coins, int[][] dp) {
//         if(ind == 0 ) {
//             if( T % coins[0] == 0) return T / coins[0];
//             return (int)1e9;
//         }
        
//         if(dp[ind][T] != -1) return dp[ind][T];
        
//         int notTake = 0 + f(ind-1, T, coins, dp);
//         int take = Integer.MAX_VALUE;
//         if(coins[ind] <= T) take = 1 + f(ind, T - coins[ind], coins, dp);
        
//         return dp[ind][T] = Math.min(take, notTake);
//     }
//     public int coinChange(int[] coins, int amount) {
//         int n = coins.length;
//         int ans = f(n-1, amount, coins, dp);
//         if(ans  >= 1e9) return -1;
//         return ans;
//     }

    //---------------------------------------------------------
    // **MEMOIZATION**
    //---------------------------------------------------------
    // TC: O(n * amount)
    // SC: O(n * amount) for the memoization table 'dp'.
    //---------------------------------------------------------
//     int[][] dp = new int[n][amount + 1]; 
//     for (int i = 0; i < n; i++) {
//         Arrays.fill(dp[i], -1);
//     }
    
//     int ans = f(n-1, amount, coins, dp);
//     if(ans  >= 1e9) return -1;
//     return ans;

    //------------------------------------------------------------
    // **TABULATION**
    //------------------------------------------------------------
    // TC: O(n * amount)
    // SC: O(n * amount) for the tabulation table 'dp'.
    //------------------------------------------------------------
//     int[][] dp = new int[n][amount + 1]; 
    
//     for(int i=0; i<=amount; i++) {
//         if(i % coins[0] == 0) dp[0][i] = i/coins[0];
//         else dp[0][i] = (int)1e9;
//     }
    
//     for(int ind=1; ind<n; ind++) {
//         for(int T=0; T<=amount; T++) {
//             int notTake = 0 + dp[ind-1][T];
//             int take = Integer.MAX_VALUE;
//             if(coins[ind] <= T)
//                 take = 1 + dp[ind][T - coins[ind]];

//             dp[ind][T] = Math.min(take, notTake);  
//         }
//     }
//     int ans = dp[n-1][amount];
//     if(ans  >= 1e9) return -1;
//     return ans;

    //--------------------------------------------------------
    // **SPACE OPTIMIZATION**
    //--------------------------------------------------------
    // TC: O(n * amount)
    // SC: O(amount) for the space-optimized table.
    //--------------------------------------------------------
    int prev[] = new int[amount + 1];
    int cur[] = new int[amount + 1];
    
    for (int i = 0; i <= amount; i++) {
        if (i % coins[0] == 0) prev[i] = i / coins[0];
        else prev[i] = (int)1e9;
    }
    
    for (int ind = 1; ind < n; ind++) {
        for (int T = 0; T <= amount; T++) {
            int notTake = 0 + prev[T];
            int take = Integer.MAX_VALUE;
            if (coins[ind] <= T)
                take = 1 + cur[T - coins[ind]];

             cur[T] = Math.min(take, notTake);  
        }
        prev = cur;
    }
    
    int ans = prev[amount];
    if (ans  >= 1e9) return -1;
    return ans;
}
}
